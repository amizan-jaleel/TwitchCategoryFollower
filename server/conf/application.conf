# -----------------------------------------------------------------------------
# /server/conf/application.conf
# -----------------------------------------------------------------------------
# This is the main configuration file for the Play application.
# It uses HOCON syntax: https://github.com/lightbend/config/blob/main/HOCON.md
#
# Current time: Friday, April 25, 2025 at 9:21 AM EDT
# Location: South Plainfield, New Jersey, United States (for context, not used by config)
# -----------------------------------------------------------------------------

# Secret key
# ~~~~~
# The secret key is used for cryptographic operations (e.g., signing session cookies).
# It's VITAL this is kept SECRET and is CONSISTENT across all instances if you scale.
#
# !!! WARNING !!!
# DO NOT use this default key in production. Generate a unique, secure key.
# You can run `sbt playGenerateSecret` in the sbt console to generate one.
# It's best practice to load the secret from an environment variable in production.
play.http.secret.key = "changeme_7a9b3c1d8e0f4g2h5i1j6k3l7m4n9o_replace_this_immediately"
# Example for loading from environment variable (recommended for production):
# play.http.secret.key = ${?APPLICATION_SECRET}


# Allowed Hosts Filter
# ~~~~~
# Security filter that checks the Host header is one we expect.
# Set to ["."] to allow all hosts ONLY during development for convenience.
#
# !!! WARNING !!!
# Restrict this to your actual host names in production.
# Example: play.filters.hosts.allowed = ["myapp.example.com", "www.myapp.example.com"]
play.filters.hosts {
  allowed = ["."] # Allows any host - DEVELOPMENT ONLY
}


# Internationalization (i18n)
# ~~~~~
# Define the languages supported by your application.
play.i18n.langs = [ "en" ]


# Logging Configuration
# ~~~~~
# Configure the root log level and levels for specific packages.
# Levels: ERROR, WARN, INFO, DEBUG, TRACE
logger.root = INFO
logger.play = INFO        # Play framework's internal logging
logger.application = DEBUG # Your application's logs (when using play.api.Logging trait)


# Filters Configuration
# ~~~~~
# Enable Filters by adding them to this list. Order can sometimes matter.
# Common filters for security and cross-origin requests:
play.filters.enabled += play.filters.cors.CORSFilter             # Handles Cross-Origin Resource Sharing headers
play.filters.enabled += play.filters.headers.SecurityHeadersFilter # Adds common security-related HTTP headers
# play.filters.enabled += play.filters.csrf.CSRFFilter           # Enable if using session-based auth and HTML forms


# CORS Filter Specific Configuration (if CORSFilter is enabled above)
# ~~~~~
# Essential if your Scala.js frontend is served from a different origin (port or domain)
# during development (e.g., localhost:8080) or in production.
play.filters.cors {
  # pathPrefixes = ["/api"]                # Apply CORS only to specific paths
  allowedOrigins = null                   # null = Allow all origins (DEVELOPMENT ONLY)
                                          # Production Example: ["https://frontend.example.com", "http://localhost:8080"]
  allowedHttpMethods = ["GET", "POST", "PUT", "DELETE", "OPTIONS"] # Methods allowed for CORS requests
  allowedHttpHeaders = ["Accept", "Content-Type", "Origin", "X-Requested-With", "Authorization"] # Allowed request headers. Add others if needed.
  preflightMaxAge = 3 days                # How long browser can cache preflight (OPTIONS) responses
}


# Security Headers Filter Specific Configuration (if SecurityHeadersFilter is enabled above)
# ~~~~~
# Provides defaults like X-Frame-Options, X-Content-Type-Options etc.
# You can customize them here if needed. Default values are generally reasonable.
# See Play documentation for all options. Example:
# play.filters.headers {
#   frameOptions = "DENY"
#   contentTypeOptions = "nosniff"
#   # contentSecurityPolicy = "default-src 'self'; script-src 'self' http://localhost:8080" # Example CSP - Needs careful configuration!
# }


# CSRF Filter Specific Configuration (if CSRFFilter is enabled above)
# ~~~~~
# Configure Cross-Site Request Forgery protection. Often needed for web apps with forms.
# May need bypass configuration for pure JSON APIs using token auth.
# play.filters.csrf {
#   header.bypassHeaders {
#     X-Requested-With = "*"       # Allow common AJAX requests
#     Csrf-Token = "nocheck"       # Example custom header to bypass CSRF check (use with caution)
#   }
#   # token.cookieName = "MyCsrfCookie" # Customize cookie name if needed
#   # token.sign = true                 # Sign the CSRF token
# }


# Database Configuration (Example using PostgreSQL - Uncomment and configure if needed)
# ~~~~~
# 1. Add the JDBC driver to your `libraryDependencies` in `build.sbt`
#    Example: "org.postgresql" % "postgresql" % "42.7.3" (check latest version)
# 2. Uncomment and configure the settings below.
#
# db.default.driver = org.postgresql.Driver
# db.default.url = "jdbc:postgresql://localhost:5432/mydatabase" # Replace with your DB details
# db.default.username = myuser
# db.default.password = "secret"
#
# !!! WARNING !!!
# Avoid hardcoding passwords. Use environment variables or a secrets manager in production.
# Example using environment variable:
# db.default.password = ${?DB_PASSWORD}


# Database Evolutions Configuration (If using Play Evolutions for schema management)
# ~~~~~
# Manages database schema changes automatically based on scripts in `conf/evolutions/default`
#
# play.evolutions.db.default.enabled = true
#
# !!! WARNING !!!
# autoApply should generally be false in production. Apply evolutions deliberately.
# play.evolutions.db.default.autoApply = true        # DEVELOPMENT ONLY
# play.evolutions.db.default.autoApplyDowns = true   # DEVELOPMENT ONLY


# Application Specific Configuration
# ~~~~~
# Define your own custom configuration parameters here.
# Example:
# myapp {
#   admin.email = "admin@example.com"
#   feature-x.enabled = true
#   some-api {
#     url = "http://api.example.com/v1"
#     timeout = 5 seconds
#   }
# }